Et voici quelques lignes de code que j'ai réalisé durant mes années de spécialité NSI : 

Algorithme de recherche : 
from random import*
import time

def plusgrand(l):
    n=int(input("entrez la taille de la liste : "))
    a = 0
    deb = time.time()
    for i in range(n):
        l.append(randint(a, a+10))
        a = a +10
    end = time.time()
    print(end-deb)
    return l

def recherche(L,x):
    deb=time.clock()
    for i in range(len(L)):
        if x==L[i]:
            return True
    end=time.clock()
    print(end-deb)
    return False

#programme principal
l=[]
print(plusgrand(l))
x = int(input("entrez un nombre : "))
print(recherche(l, x))



Conversion d'une lettre en hexadecimal : 
def hexa(n) :
    return hex(n)[2:]

def f():
    x = str(input("Veuillez entrez un texte : "))
    for i in x:
        t=ord(i)
        y=hexa(t)
        print(y)
f()


Ainsi que quelques programmes utilisant la récursivité d'une fonction : 
def fonct(n) : 
    if n>0: fonct (n-1) 
    print (n) 
fonct (3) 

def sonme_recursive(a,b) : 
    if b==0 :
        return a 
    else : 
        return somme_recursive(a+1,b-1) 
somme_recursive(3,5)

def sonne_termes (L): 
    if len (L) == 0 : 
        return 0 
    else : 
        return sonme_termes (Ll:=11)+L1-21 
print(sonme_termes (11,2,3,4,5,61) ) 


def max (L) : 
    if len(L) == 1 : 
        return L[0] 
    elif len(L) ==0 : 
        return 0 
    elif L[-1]>L[-2]: 
        return max(L[: -2]+[L[-1]]) 
    else : 
        return max(L[:-1]) 
print(max([1,2,3,5,6.2,8,0.10,54,22.71]))


def recherche(L,x) : 
    if len (L)==0: 
        return False 
    elif x==L[-1] :
        return True 
    else : 
        return recherche(L[:-1].x) 
print (recherche([9,3,2,5.17,8], -3)) 


def enleve (L,x) : 
    if len (L) == 0: 
        return "truc" 
    elif x== L[-1] : 
        del (L[-1]) 
        return enleve(L,x) 
    else : 
        return (enleve(L[:-1].x) ) 
    return enleve(L[: -1].x) + [L[-1]] 
print(enleve([9,3,2,5.17,8],17))


def enleve(L, x) : 
    if Len (L) ==0: 
        return nL 
    elif x == L[-1]: 
        return enleve(L[:-1], X) 
    else :
        nL.append(L[-1]) 
        return enleve(L[:-1],x)
nL = [] 
print(enleve([9,3,2,5,17,8,171,17])) 


def occurence(L, x,nb) : 
    if len(L)==0: 
        return nb 
    elif x == L[-1]: 
        return occurence(L[: -1].x.nb+1) 
    else : nL.append (L[-1]) 
    return occurence(L[:-1],x,nb)
nb= 0 
nL = [] 
L=[9,3,2,5,17,8,17] 
print(occurence(L,17,nb)) 
print (L)  


def entoure(a,b) : 
    if b ==0 :
        return a 
    else : 
        return entoure('['+ a + ']',b-1) 
print(entoure('42',410))
